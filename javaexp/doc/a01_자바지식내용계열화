# 자바 지식 체계 내용계열화
1. 자바의 기초
	1) 기본 설치 방법
	2) 핵심적인 단축키 (활용)
	3) 주석 처리
	4) 자바 프로그램의 출력 처리
	5) 자바 프로그램의 입력 처리
	
2. 자바의 변수 (메모리 처리 1단계)
	0) 자바의 메모리 분류 (main() 가 있는 곳에서 사용된다)
		stack (1단계 메모리)
		heap (2단계 메모리 - 객체형 데이터를 저장할 때 사용)
	1) 기본 데이터 유형
		숫자형
			- 정수 : byte, short, *int*, long
			- 실수 : float, *double*
		문자형 : char
		boolean형 : boolean
	2) 데이터 유형의 형변환
		- 작은 유형 => 큰 유형 (promote, 자동형변환)
		- 큰 유형 => 작은 유형 (casting)
	3) 변수 선언 규칙
		# 에러발생 
		- 숫자형 시작 X ex) int 25Num;
		- 내장 코드 X ex) String break;
		- 선언된 변수를 다시 선언 X ex) int num01 = 25; int num01;
		- 대소문자 구분 ex) int num01; int Num01; ==> 다른 변수
		- 특수문자는 $, _ 만 허용
		# 가독성
		- 일반 변수는 소문자 선언
		- 상수는 대문자로 선언 ex) static final PI = 3.14;
		- 합성어는 구분을 위해서 대문자를 중간에 추가하거나 _로 구분한다.
		- 클래스명은 첫 문자만 대문자로 시작
		- 메소드명은 소문자로 시작

3. 자바의 연산자
	1) 대입 연산자 `=`
	2) 증감 연산자 `++, --, +=, -=`
	3) 산술 연산자 `+, -, *, /, %`
		- 우선순위 (), * /, + -
	4) 비교 연산자 `>, >=, <, <=, ==, !=`
		주의) 문자열 비교시에는 equals() 를 활용한다.
	5) 논리연산자 `&&, ||, !`
	6) 삼항연산자 `조건 ? 처리결과1 : 처리결과2`

4. 조건문 처리
	- if (조건문) {}
	- if (조건문) {} else {}
	- if (조건 1) {} else if (조건 2) {} ... else {}
	- switch (데이터) {case 1 : break; case 2: break; ... default : }

5. 반복문 처리
	- for (초기값; 반복조건; 증감연산자) {}  
	- while (반복조건) {}
	- do {} while (반복조건);
	- break; : 반복을 중단 처리시 사용
	- continue; : 해단 반복 step을 중단 처리시 사용

6. 자바의 데이터 처리 (메모리 처리 2단계)
	1) 배열	
		- int[] arry = {100, 200, 300};
	2) 객체
		class Person { String name; int age; // 구성요소 필드선언}

7. 객체의 활용
	1) 클래스 구성요소
		- 클래스의 구성요소로 크게 필드 / 생성자 / 메서드
	2) 필드 : 클래스를 통해 만든 객체의 기본 데이터를 할당하는 곳
				일반적으로 객체의 필드는 접근제어를 private로 하여 바로 직접적으로 접근할 수 없게 처리
	3) 생성자 : 클래스를 통해 객체가 만들어질 때 기본정보를 설정할 때 사용
	4) 메서드
		- 각각의 메서드를 통해 기능 내용을 처리할 때 사용
		- 위에 있는 필드값을 따로 저장하거나, 기능적인 데이터를 가져오거나 로직에 의해서 원하는 데이터를 처리할때 사용
	
8. 객체 vs 객체
	1) 구조
	- 객체 안에 객체를 처리하여 활용하는 내용을 수행하는 것을 말한다
	class Phone {
		폰번호
		폰의 제조사
	}
	class Person {
		Phone phone; // 객체가 phone 을 사용하기 위한 공간 마련
		String name; // 이 사람의 이름
		
		Person (String name) {
			this.name = name;
		}
		void setPhont (Phone phone) {
			this.phone = phone;
		}
		
	}
	
	2) 접근제어자
		private, default, protected, public
		private : 클래스 안에서만 사용하는 변수
		default : 접근제어자가 붙지 않는 변수, 같은 패키지 클래스에서 자유롭게 접근이 가능하나, 외부 패키지는 접근 불가능 변수
		protected : 상속에 의한 접근 제어 가능
		public : 외부패키지에 접근 가능 import로 접근 가능 
		
	3) 상속
		- 기본 1단계
			상위에 선언된 클래스 내용 그대로 사용하면서 하위에 있는 내용 추가 사용
		- 메서드 오버라이딩 :상위에 있는 내용을 재정의
		- 다형성 : 상위에 있는 객체 메모리에 하위 객체들을 할당하여 여러가지 재정의한 메서드를 처리하는 것을 말한다.
			상위 = 하위 : 여러가지 다양한 형태의 기능을 처리한다		
		- 추상클래스
			동일한 이름의 기능메서드 정의를 강제화 하려는 목적으로 사용. 상위는 껍데기로 실제로는 활용할 수 없으나 
			하위에서 실제 상속을 받아 상위에 정
		- 인터페이스
			
	
----------------------------------------------------

9. 예외 처리

10. 내장된 객체
	1) String
	2) Wrapper
	3) Collection 객체 처리 
		List

11. java.io 패키지 내 객체 처리

12. 데이터 베이스 연동 처리