### 1. JSP useBean 액션 태그
1) JSP 페이지에서 Java 객체를 인스턴스화하고 참조하기 위해 
	어떤 액션 태그를 사용합니까?
   - a) `<jsp:setProperty>`
   - b) `<jsp:getProperty>`
   - c) `<jsp:useBean>`
   - d) `<jsp:include>`
2) `<jsp:useBean>` 태그의 `scope` 속성이 `page`로 설정되었을 때, 
	빈 객체의 유효 범위는 어디까지입니까?
   - a) 전체 어플리케이션
   - b) 현재 페이지
   - c) 세션
   - d) 요청
   
### 2. 쿠키 (Cookies)
3) 쿠키의 최대 텍스트 길이는 얼마입니까?
   - a) 4KB
   - b) 2KB
   - c) 10KB
   - d) 16KB

### 3. JSTL
4) JSTL에서 조건에 따라 다른 작업을 실행하기 위해 사용되는 태그는 무엇입니까?
   - a) `<c:if>`
   - b) `<c:set>`
   - c) `<c:forEach>`
   - d) `<c:choose>`
5) `<c:forEach>` 태그의 기능은 무엇입니까?
   - a) 변수 설정
   - b) 조건 검사
   - c) 콜렉션을 통한 반복
   - d) 오류 처리

### 4. EL (Expression Language)
6) EL에서 배열 또는 리스트의 특정 요소에 접근하기 위해 사용하는 기호는 무엇입니까?
   - a) `{}` 
   - b) `[]`
   - c) `()`
   - d) `<>`
7) EL의 삼항 연산자 `?:`에서 조건이 참일 때 반환되는 값은 어느 위치에 있습니까?
   - a) 처음
   - b) 중간
   - c) 끝
   - d) 연산자는 두 개의 값만을 가짐
8) EL에서 논리적 'AND' 연산을 나타내는 연산자는 무엇입니까?
   - a) `&&`
   - b)`and`
   - c) `&`
   - d) 둘 다 a와 b
   
### 5. JSP & Servlets
9) JSP 페이지에서 서블릿으로 제어를 넘기기 위해 사용되는 표준 액션 태그는
	무엇입니까?
   - a) `<jsp:forward>`
   - b) `<jsp:plugin>`
   - c) `<jsp:include>`
   - d) `<jsp:param>`
10) 서블릿에서 쿠키를 생성하여 클라이언트에게 보내는 메서드는 무엇입니까?
   - a) `response.addCookie(Cookie cookie)`
   - b) `request.setCookie(Cookie cookie)`
   - c) `response.newCookie(Cookie cookie)`
   - d) `request.getCookie(Cookie cookie)`

11) JSP에서 페이지 디렉티브를 사용하여 세션을 비활성화하려면 어떻게 해야 합니까?
   - a) `<%@ page session="true" %>`
   - b) `<%@ page session="false" %>`
   - c) `<%@ page disableSession="true" %>`
   - d) `<%@ page enableSession="false" %>`

12) JSTL의 `<c:out>` 태그가 하는 일은 무엇입니까?
   - a) 데이터를 콘솔로 출력합니다.
   - b) HTML 페이지에서 데이터를 출력합니다.
   - c) 데이터를 파일로 출력합니다.
   - d) 데이터를 데이터베이스로 출력합니다.

13) `<jsp:useBean>`에서 bean의 속성 값을 설정하는 데 사용되는 태그는 무엇입니까?
   - a) `<jsp:setProperty>`
   - b) `<jsp:getProperty>`
   - c) `<jsp:property>`
   - d) `<jsp:useProperty>`


14) 쿠키 값을 읽기 위해 서블릿에서 사용하는 메서드는 무엇입니까?
   - a) `request.getCookies()`
   - b) `response.getCookies()`
   - c) `request.readCookies()`
   - d) `response.readCookies()`

15) EL에서 JavaBean의 property를 참조하기 위해 어떤 식을 사용합니까?
	- a) `${bean.property}`
	- b) `${bean[property]}`
	- c) `${bean->property}`
	- d) `${bean::property}`
	
==================================================================================

# 비동기 방식으로 서버의 데이터 가져오기 (a09/a03)
1. xhr의 비동기 방식이란?
	서버에 요청하고, 다른 기능을 처리할 수 있되 그 요청에 대한 처리는
	이벤트 핸들러 onreadyStatechange에 맞기고 하는 것을 말한다.
2. 기능 처리를 위한 핵심 코드
	1) xhr.open(get/post, url, true); // true로 비동기 방시긍로 설정
	2) 전담 이벤트 핸들러에게 맞김
		xhr.onreadystatechange = function() {
			// 상태값의 변화에 따른 처리를 이벤트 핸들러에게 위임
			xhr.readyState : 서버와 통신은 단계별로 코드값을 가져오게 하는 속성
				0 : 객체를 만든다.
				1, 2 : 서버에서 데이터를 받을 준비를 한다.
				3 : 서버에서 데이터를 일부 받기 시작한다.
				4 : 서버에서 데이터를 모두 받는다.
				결국 위 상태값을 4가 되었을때 처리한다.
			xhr.status : https응답 코드 200 ~ 299 (정상적으로 받음)
				일반적으로 200으로 설정 안에서 정상적으로 다 데이터가 있을때 처리
				그 외 에러코드일땐 처리하지 않는다.
			xhr.responseText : 이 핸들러 메서드 안에서 비동기적으로 받은 데이터를
				처리한다.
			=> 실제 조건 처리 코드
			if (xhr.readyState == 4 && xhr.status == 200) {
				$("대상 객체 선택자").text(xhr.responseText); // 서버에서 받은
					결과값 출력
			}
		}

==================================================================================

# ajax의 요청값 처리 (a09/a05)
1. ajax도 서버단에 요청값을 처리할 수 있다.
2. 그 요청값에 따른 결과를 다르게 처리한다.
3. 기본 처리형식
	1) xhr.open("get/post", "요청페이지?key=" + val, true);
		호출하는 페이지에 요청값을 전달하고, 그 페이지에서 요청값에 따라서
		결과를 xhr.response에서 받아서 화면에 처리할 수 있다.
		
==================================================================================

# jquery를 통한 ajax 처리 (a09/a07)
1. jquery에서는 보다 간편한 속성 설정 방식과 요청값 처리로 ajax를 처리하고 있다.
2. 기본 형식
	1) $.ajax({속성 : 속성값, 속성 : function() {}})
		형식으로 ajax를 처리하고 있다
	2) 주요 속성과 메서드
		$.ajax({
			url : 요청 자원명
			type : 'get/post',
			data : 'name=홍길동', 
				# 요청값 처리 형식 
				1. key=val
				2. $("form").serialize(), form 하위의 name, value 속성을 key=val 형식으로 변환
				3. json 형식 {name : '홍길동', age : 25}
			dataType : "json/text/xml", // 결과값 형식을 지정
			success : function(data) { // 성공했을 때 결과값
				data : 서버에서 전송된 결과값을 받을 수 있다.
			},
			error : function(err) {
				console.log(err) // 에러 처리 결과값을 받을 수 있다.
			}
		})
		
==================================================================================

1211 과제
<!-- 1. ajax의 동기처리 기본형식을 예제를 통해서 설명하세요 -->
<!--
- 동기 : 서버와 클라이언트가 같은 속도로 연계하는 것
- 비동기 : 서버와 클라이언트가 같은 속도로 연계하지 않음
- 핵심 코드
	1) XMLHttpRequest 객체 생성 (var xhr = new XMLHttpRequest())
	2) 옵션 설정 메서드 (xhr.open("get/post", "서버 자원위치, 동기/비동기 boolean))
	3) 전송 처리 메서드 (xhr.send())
	4) 서버에서 전송해주는 자원을 받는 속성 (xhr.responseText)
	--- (비동기 일시 추가)
	5) 비동기일땐 3번 항목까지 처리하고 결과를 받는 xhr.responseText를 이벤트로 처리
		xhr.onreadystatechange = function() {
			xhr.readyState : 서버와 통신을 단계별로 코드값을 가져온다.
			0 : 객체를 만듦
			1, 2 : 서버에서 데이터를 받을 준비를 함
			3 : 서버에서 데이터를 일부 받음
			4 : 서버에서 데이터를 모두 받음
			xhr.status : http 응답코드 200 ~ 299 (정상적으로 받을때)
				-> 일반적으로 200으로 설정. 정상적으로 데이터가 전부 있을때 처리
			xhr.responseText를 이 핸들러 메서드 안에서 비동기적으로 받은 데이터를 처리
		}
		
- 동기식 예제 (a01_start.jsp)
	var xhr = new XMLHttpRequest();
	xhr.open("get", "z01_data.jsp", false)
	xhr.send()
	alert("서버의 자원을 받은 결과 : " + xhr.responseText)
	$("h3").text(xhr.responseText)
- 비동기식 예제 (a03_async_xhr.jsp)
	var xhr = new XMLHttpRequest()
	xhr.open("get", "z03_empList.jsp", true)
	xhr.onreadystatechange = function() {
		console.log("상태값1 : " + xhr.readyState)
		console.log("상태값2 : " + xhr.status)
		
		if (xhr.readyState == 4 && xhr.status == 200) {
			console.log(xhr.responseText)
			var enames = xhr.responseText.split(", ")
			var addHTML = ""
			enames.forEach(function(name, idx) {
				console.log(idx + " : " + name)
				addHTML += "<tr>"
				addHTML += "<td>" + (idx + 1) + "</td>"
				addHTML += "<td>" + name + "</td>"						
				addHTML += "</tr>"
			})
			$("tbody").html(addHTML)
		}
		
	}
	xhr.send()
-->

<!-- 2. ajax의 동기와 비동기의 개념적 차이점과 
	js에서 코드부분의 차이점을 기술하세요. -->
<!--
1번에서 함
-->

<!-- 3. ajax를 동기형식으로 data.jsp에서 
	물품리스트(사과,바나나,딸기)를 처리하여, 물건리스트호출시, 서버에 있는 
	물품리스트를 가져오는 처리하세요. -->
<!--
// main.jsp
<h2>1211 과제 물품리스트 호출</h2>
<h3></h3>

// script
$(document).ready(function() {
	$("h2").click(function() {
		var xhr = new XMLHttpRequest();
		xhr.open("get", "1211data.jsp", false)
		xhr.send()
		$("h3").text(xhr.responseText)
	})
});

// data.jsp
사과,바나나,딸기
-->

<!-- 4. ajax를 비동기형식으로 요청값을 도서명, 가격, 할인율를 
	넘기면 결과값으로 해당 도서명과 할인율에 따른 계를 
	alert()창으로 가져오는 처리를 하세요. -->
<!--
// main.jsp
<h2>1211 과제 도서 비동기 호출</h2>
<h3></h3>

<input name="name" placeholder="도서명" /> 
<input name="price" placeholder="가격" />
<input name="dis" placeholder="할인율" />
<button type="button" id="result">계산</button>

// script
$("#result").click(function() {
	var xhr = new XMLHttpRequest()
	var name = $("[name=name]").val();
	var price = $("[name=price]").val();
	var dis = $("[name=dis]").val();
	xhr.open("get", "1211data.jsp?name=" + name + "&price=" + price
			+ "&dis=" + dis, true)
	xhr.onreadystatechange = function() {
		if (xhr.readyState == 4 && xhr.status == 200) {
			$("h3").append(xhr.responseText)
		}
	}
	xhr.send()
})

// data.jsp
도서명 : ${ param.name }<br>
금액 : ${ param.price }<br>
적용된 금액 : ${ param.price - (param.price * (param.dis / 100)) }
-->

<!-- 5. jquery ajax의 기본형식을 기술하세요. -->
<!--
$.ajax({속성 : 속성값, 속성 : function() {}})
$.ajax({
	url : 요청 자원명
	type : 'get/post',
	data : 'name=홍길동', //요청값 처리 형식 $("form").serialize(),
	dataType : "json/text/xml", // 결과값 형식을 지정
	success : function(data) { // 성공했을 때 결과값
		data : 서버에서 전송된 결과값을 받을 수 있다.
	},
	error : function(err) {
		console.log(err) // 에러 처리 결과값을 받을 수 있다.
	}
})
- ex (a07_jqueryAjax.jsp)
$("#infBtn").click(function() {
	alert("요청값 : " + $("form").serialize())
	$.ajax({
		url : "z07_data.jsp",
		type : "get",
		data : $("form").serialize(),
		dataType : "text",
		success : function(data) {
			// alert(data)
			$(".jumbotron").append(data)
		},
		error : function(err) {
			console.log(err)
		}
	})
	
})
-->

<!-- 6. jquery ajax로 입력한 선수의 이름과 타석과 안타를 서버에서 
	요청결과로 @@@의 타율을 @@를 화면에 출력되게 하세요. -->