# 학습목표
- 의존성 주입(DI)의 기본 원리를 이해합니다.
- DI가 코드 유지보수와 확장성에 어떤 이점을 주는지 배웁니다.
- 다양한 DI 패턴(생성자 주입, 세터 주입, 필드 주입)을 학습합니다.

# 주요 핵심 키워드와 개념
- 의존성 주입(Dependency Injection) : 객체가 필요로 하는 의존성을 
	외부에서 주입하는 기법
- IoC(Inversion of Control) : 프로그램의 흐름을 외부에서 제어하는 원리
- 컨테이너(Container) : 의존성을 관리하고 주입하는 환경 또는 프레임워크
- 생성자 주입(Constructor Injection) : 객체 생성 시 필요한 의존성을 주입하는 방식
- 세터 주입(Setter Injection) : 세터 메소드를 통해 의존성을 주입하는 방식

# 생각하고 토론해볼 내용
- 의존성 자동 주입이 없는 경우, 프로그램의 유지보수는 어떻게 어려워질까요?
- 생성자 주입과 세터 주입 사이에서 어떤 방법이 더 선호되며, 그 이유는 무엇일까요?
- 의존성 주입이 프로그램의 성능에 미치는 영향은 무엇일까요?

# 간단한 퀴즈
1) 의존성 주입의 주된 이점은 무엇인가요? => c
	- a) 성능향상
	- b) 코드 재사용성
	- c) 유지보수의 용이성
	- d) 실행속도 증가
2) IoC의 정확한 의미는 무엇인가요? => b
	- a) Input over Controller
	- b) Inversion of Control
	- c) Internal Object Creation
	- d) Integration of Components
	
====================================================================

# 컨테이너 안에 객체 vs 객체 관계 설정 (a01/di13)
1. 컨테이너는 객체와 객체간의 연관관계가 여러 유형으로 설정되어 처리될 수 있다.
	우선, 클래스가 해당 연관관계 구조로 된 클래스가 먼저 선언되어 있어야 하고,
	이를 xml 형식으로 호출하여 처리한다. 단계별로 명시적으로 객체 vs 객체를 선언에
	의해서 연관관계를 설정하고, 그 이후 필요에 따라 자동 연관관계 설정 옵션을 통해
	커넽이너 안에 객체들 간의 DI(의존성 주입)이 이루어 지게 하는 것이다.
2. 처리 순서
	1) 클래스 간의 연관 관계로 설정
	2) 컨테이너(xml 형식) 안 포함될 객체 선언
	3) 컨테이너(xml형식) 안에 포함할 객체 선언 (포함될 내용 호출 할당)
		ref="포함될 객체id명"
	4) 외부에서 호출 처리