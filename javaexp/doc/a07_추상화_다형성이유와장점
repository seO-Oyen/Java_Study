# 추상화

1. 이유
	- 복잡한 시스템을 단순화시켜 개념적으로만 표현하려는 의도로 사용된다
	- 불필요한 정보를 숨기고 중요한 정보만을 표현함으로써 효율적인 설계와 구현이 가능해진다.
2. 장점
	- 시스템 복잡도 감소 : 필요한 특성만을 나타내어 복잡도를 줄인다.
	- 유지보수 용이 : 기본 구조 변경없이 구현 내용만을 수정하여 시스템을 업데이트 할 수 있다.
	- 확장성 : 기본 구조를 바꾸지 않고 새로운 기능을 추가하기 쉽다.
3. 실무적 적용 예시
- 데이터베이스 연결 : 데이터베이스에 연결하고 쿼리를 실행하는 복잡한 과정을 숨기고, 사용자에게는 간단한 메서드들만 제공한다.

# 다형성

1. 이유
	- 하나의 인터페이스나 클래스르 다양한 방법으로 동작하게 하여 유연성과 확장성을 증가시킨다.
	- 코드의 재사용성을 높이며, 유지보수를 용이하게 한다.
2. 장점 
	- 유연성 : 하나의 메서드나 클래스가 다양한 객체나 데이터 타입에 대해서 동작할 수 있다.
	- 코드 재사용성 : 코드의 중복을 줄이고 통일된 인터페이스를 제공함으로써 코드의 재사용성이 높아진다.
	- 유지보수 : 하나의 메서드나 클래스 수정으로 다양한 객체나 데이터 타입에 대한 동작을 변경할 수 있다.
3. 실무적 적용 예시
	- 그래픽 사용자 인터페이스 (GUI) 컴포넌트
	- 결제 시스템