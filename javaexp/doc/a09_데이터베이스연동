# java를 통한 database 서버 연동 프로그래밍

1. 소프트 웨어를 사용하는 사용자에 의해 입력된 데이터는 필요에 따라 DB서버라는
	고정적이고 지속적인 저장장치에 저장되었다가 필요에 따라서 활용하여
	사용자가 원하는 정보를 가져올 수 있다.
2. 사용자와 서버사이에 보다 효율적인 사용자 정의 인터페이스가 있다면
	원하는 정보를 효율적이고 빠르게 로딩할 수 있다.
3. 웹 프로그래밍에 화면을 처리하는 UI를 html로 구현하고, 백엔드단에서
	java를 통해 서버에 접속하여, 그 요청에 따라 데이터를 입력, 수정, 삭제,
	리스트 등을 처리한다.

# 데이터베이스 연동처리를 위한 단계별 처리 내용과 이해
1. DB연동을 위한 환경설정
	1) DB서버 구동 : 원격에 DB서버가 구동되어 있고, DB 서버 접속을 위한 정보를
		가지고 있어야 한다.
		ip, port, DB서버명, 계정, 비밀번호
	2) jdbc 드라이버 : 각 DB서버의 회사에서는 해당 서버를 접속하기 위한
		공통되는 java프로그램을 컴파일 시켜서 패키지화한 모듈을 가지고 있는데,
		이것을 드라이버라고 한다. @@@.jar로 되어있다.
		이것을 프로그램에 연동할 수 있도록 하여야한다.
		WEB프로그래밍의 경우 webapp 하위 WEB-INF 밑 lib에 가지고 있어야한다.
2. DB 접속 객체를 위한 클래스 선언
	1) 데이터베이스 서버에 접속하기 위한 정보를 가지고 연동을 처리한다.
	2) DB 연동시 필요로 예외 처리 및 공통 자원해제 처리 메서드 구현
3. 업무별 기능 DAO 작성
	1) 위 DB 접속 객체를 호출하면서
	2) 공통기능 객체 선언
		Connection con : 연결 객체
		Statement stmt : 대화객체(sql을 이용해서 오라클 서버에 명령 처리)
			SQL Injection이라는 보안에 위협이 되는 처리에 대비하기 위해서 처리하는
			경우가 많다.
		PreparedStatement pstmt : 향상된 대화객체
			(여러가지 보안 사항이 적용된 객체로 sql을 이용하여 
			오라클 서버에 명령처리)
		ResultSet rs : 결과처리 객체 (select 구문의 경우, 서버에서 전달해온
			데이터를 자바에서 이 결과 객체를 통해 우선 젖장한다.
			이 객체는 2차원의 행/열로 되어 데이터와 컬럼 정보가 저장되어 있다.
			이 객체 안에 있는 여러 속성으로 통해서 다시 DTO나 VO로 전달해서
			프로그램에 사용할 수 있게 한다.
	3) 기능메서드 선언
		ex)
			public List<Emp> empList(Emp sch) {
				List<Emp> list = new ArrayList<Emp>();
				return list;
			}

		- 리턴할 객체 선언 : sql의 결과로 단일 객체 또는 다중의 객체를 리턴할 수 
			있도록 리턴객체를 선언
		- 매개변수 객체/변수 선언 :  sql에 조건인나 입력, 수정, 삭제시 처리할
			데이터를 객체나 변수에 담아서 처리할 수 있게 한다.
			
		* 기능메서드에서 처리하는 내용 ({}에서 처리되는 내용)
		- 실제 리턴할 객체
		- sql 선언
		- DB 연결(Connection)
		- 대화 객체를Statement)를 통해서 sql 처리
		- 결과처리(ResultSet)를 통해서 처리된 결과를 가지고
			while, if문을 통해 rs.next(), rs.getXXX("컬럼명")을 통해서
			VO나 DTO객체에 할당한다.
		- 자원해제 및 예외처리
	4) main() 에서 정상실행 여부 테스트
4. 만들어진 DAO를 웹(jsp)프로그램을 통해서 호출하여, 화면에 출력 및 기능 처리한다.
	jsp 상단에 사용할 객체 import
	
	<%
		// main() 에서 테스트한 내용을 호출하여 사용한다.
		EmpDao dao = new EmpDao();
	%>

# 기능메서드의 처리 순서
1. sql 작성
	데이터를 처리할 핵심 구문을 작성해서, 결과를 확인
	select *
	from emp
	where ename like '%A%' ==> A입력해서 처리할 데이터
	and job like '%B%' ==> B입력해서 처리할 데이터
	insert into emp(empno, ename) values(1000, '홍길동');
		1000 : 입력할 데이터1
		'홍길동' : 입력할 데이터2
	
	1) 입력할 데이터가 무엇인지? ==> 변수 / 객체 결정 (단순, 데이터의 복잡성에 따라)
		메서드의 매개변수로 사용
		public XXX setXXX(@@@@)
	2) 결과를 받을 데이터가 무엇인가?
		- 한개의 데이터 ==> 변수
			select count(*)
			from emp; ==> 사원정보의 개수
		- 한행의 데이터 ==> 단일객체 => VO를 생성 class Emp{}
			select * from emp
			where empno = 7000
			public Emp getEmpno(int empno)
		- 여러행의 데이터 ==> 객체형 배열
			select *
			from emp
			where ename like '%A%'
			
			public List<Emp> getEmpList(String ename)
			
		# 메서드의 리턴할 유형을 결정
2. 메서드 선언시, 매개변수 선언, 리턴값 유형 선언
	리턴할 객체 선언
	public List<Emp> getEmpList(String ename) {
		List<Emp> emplist = new ArrayList<Emp>();
		
		return emplist;
	}

3. 접속처리

4. sql 구문 문자열 할당 및 매개변수 처리
	String sql = "select * from emp where ename like '%" + ename + "%'";

5. 대화 객체 처리

# 6.결과 객체처리
	ResultSet : 2차원의 데이터구조를 가진 객체(sql의 결과값을 가지고 있다)
	일반적으로 이 객체를 프로그램적으로 활용하기 위해 VO/DTO객체에 담는 
	처리를 하여야한다.
	ResultSet rs = pstmt.XXXX;
	rs.next() : 행별로 호출하면서 return값을 boolean으로 처리한다.
	if(rs.next()) while(rs.next())
	boolean hasData = rs.next()
	각행에서 열별로 호출하는 데이터는 유형과 컬럼명/index를 기준으로 호출할 수 있다.
	> rs.getString("ename") : 컬럼명이 ename이고 이 데이터 유형은 문자열
	  rs.getInt("empno") : 컬럼명이 empno이고, 데이터 유형은 정수형
	  rs.getString(2) : select 호출 기준으로 두번째 호출하는 컬럼, 데이터는 String

7. 자원 해제

8. 예외처리

9. main() 메서드 호출 처리

10. 웹프로그래밍의 경우 웹 화면에서 html, jsp 태그와 함께 호출
	1) 요청값을 전달해서
		조회를 하거나
		등록/수정/삭제 구현
		
# DB연동 화면 구현 순서
1. 어떤 화면 내용과 데이터를 처리할지 간단하게 구상 (요구사항파악 / 화면설계서 / DB설계)
2. backend 구성
	1) sql
	2) 구성결과
	3) 입력과 출력에 대한 VO 구성
	4) 메서드 선언
3. 화면 구성
	1) html 코드
	2) 요청값 처리
	3) 데이터베이스 처리 DAO/VO 가져와서 사용하기
		최상단 : import="@@@.클래스명"
	4) DAO 객체 생성과 위에 선언한 요청값과 연동 처리
	
	
	
		
		
# 등록처리
1. sql 작성 / 테스트
2. VO : 등록데이터에 맞는 VO객체 생성처리
3. 기능메서드 선언
	public boolean insertXXXX(VO ins) {
		boolean isInsert = false;
		String sql = "등록 sql ??"
		// 템플릿활용
		con.setAutoCommit(false); // CUD를 처리하는 임시 처리기능
		// pstmt.setXXX(1, ins.getXXX()) // ?숫자에 해당하는 데이터 할당
		실행문으로 executeUpdate()
		